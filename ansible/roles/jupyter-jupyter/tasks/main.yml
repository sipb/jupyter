---
- name: Install newer Node
  block:
    - name: Install nodejs repo
      copy:
        dest: /etc/apt/sources.list.d/nodesource.list
        content: |
          deb https://deb.nodesource.com/{{version}} {{ansible_distribution_release}} main
          deb-src https://deb.nodesource.com/{{version}} {{ansible_distribution_release}} main
      vars:
        version: node_14.x
      register: node_repo
    - name: Install NodeSource key
      apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
      register: node_key
    - name: Update package lists
      apt:
        update_cache: yes
      when: node_repo.changed or node_key.changed
- name: Install jupyterhub dependencies
  package:
    name:
      - virtualenv
      - nodejs
      - cython3
      - libhesiod-dev
      # Dependencies of PIP packages below
      - libcurl4-openssl-dev
      - unixodbc-dev
      - libgdal-dev
      - libgeos-dev
      - libproj-dev
      # User packages
      - python3-gmpy2
      - python3-pyodbc
      - python3-gdal
      - texlive-full
      - manpages-dev
      - ffmpeg
      # PARI kernel
      - pari-gp
      - pari-gp2c
      - pari-galpol
      - libreadline-dev
      # Rust
      - cmake
- name: Install jupyterhub node dependencies
  npm:
    name: "{{ item }}"
    global: yes
  loop:
  - configurable-http-proxy
  - bash-language-server
  - javascript-typescript-langserver
  - unified-language-server
  - vscode-css-languageserver-bin
  - vscode-html-languageserver-bin
  - vscode-json-languageserver-bin
  - yaml-language-server
- name: Install jupyterhub
  pip:
    extra_args: --upgrade
    name:
    - jupyterhub
    - jupyterlab
    - jupyterlab_server
    - notebook
    - Cython
    - gssapi
    - oauthenticator
    - varlink
    - jupyterhub-systemdspawner
    - git+https://github.com/macathena/python-hesiod@python3
    - git+https://github.com/macathena/python-afs@py3-debian
    - git+https://github.com/sipb/jupyter#egg=sipb-jupyter&subdirectory=python
    # Extra Jupyter features
    - widgetsnbextension
    - ipywidgets
    - jupyter-archive
    - jupyterlab-git
    - jupyterlab-widgets
    - jupyterlab-quickopen
    - jupyterlab-apod
    - jupyterlab-python-file
    - jupyterlab-hdf
    - jupyterlab-latex
    - jupyterlab-kernelspy
    - astrowidgets
    - octave_kernel
    - jupyter-lsp
    - pari_jupyter
    - jupyter-c-kernel
    # Language servers
    - python-language-server[all]
    # User packages
    # Inspired by Anaconda package list:
    # curl https://repo.anaconda.com/pkgs/main/linux-64/repodata.json | jq '.packages[.packages | keys | map(select(startswith("_anaconda_depends-20")))[-1]].depends'
    - git+https://github.com/usgs/geomag-algorithms.git
    - argh
    - asn1crypto
    - astroid
    - astroplan
    - astropy
    - atomicwrites
    - attrs
    - autopep8
    - babel
    - backcall
    - beautifulsoup4
    - biopython
    - bitarray
    - bkcharts
    - bleach
    - blosc
    - bokeh
    - boto
    - bottleneck
    - brotlipy
    - cartopy
    - cffi
    - chardet
    - click
    - cloudpickle
    - clyent
    - colorama
    - contextlib2
    - cryptography
    - cycler
    - cytoolz
    - dask
    - decorator
    - defusedxml
    - diff-match-patch
    - docutils
    - entrypoints
    - et_xmlfile
    - fastcache
    - filelock
    - flake8
    - flask
    - fsspec
    - future
    - gevent
    - glob2
    - gmpy2
    - greenlet
    - h5py
    - heapdict
    - html5lib
    - icu
    - idna
    - imageio
    - imagesize
    - importlib-metadata
    - intel-openmp
    - intervaltree
    - ipython_genutils
    - ipympl
    - isort
    - itsdangerous
    - jdcal
    - jinja2
    - joblib
    - json5
    - jsonschema
    - keyring
    - kiwisolver
    - lazy-object-proxy
    - libarchive-c
    - lief
    - llvmlite
    - locket
    - lxml
    - lz4
    - markupsafe
    - matplotlib
    - mccabe
    - mistune
    - mkl
    - mock
    - more-itertools
    - mpmath
    - msgpack
    - multipledispatch
    - networkx
    - nltk
    - nose
    - notebook
    - numba
    - numexpr
    - numpy
    - olefile
    - openpyxl
    - packaging
    - pandas
    - pandoc
    - pandocfilters
    # pyls is not compatible with parso 0.8.0
    - parso<0.8.0
    - partd
    - path
    - pathlib2
    - pathtools
    - patsy
    - pep8
    - pexpect
    - pickleshare
    - pillow
    - pkginfo
    - pluggy
    - ply
    - prometheus_client
    - prompt-toolkit
    - psutil
    - ptyprocess
    - py
    - pycodestyle
    - pycosat
    - pycparser
    - pycurl
    - pydocstyle
    - pyflakes
    - pygments
    - pylint
    - pyodbc
    - pyopenssl
    - pyparsing
    - pyrsistent
    - pysocks
    - pytest
    - python-jsonrpc-server
    - python-language-server
    - pytz
    - pywavelets
    - pyxdg
    - pyyaml
    - pyzmq
    - regex
    - requests
    - rope
    - ruamel_yaml
    - scikit-bio
    - scikit-image
    - scikit-learn
    - scikit-rf
    - scikit-dataaccess
    - scipy
    - seaborn
    - secretstorage
    - simplegeneric
    - singledispatch
    - sip
    - six
    - snappy
    - snowballstemmer
    - sortedcollections
    - sortedcontainers
    - soupsieve
    - sqlalchemy
    - statsmodels
    - sympy
    - tables
    - tbb
    - tblib
    - terminado
    - testpath
    - threadpoolctl
    - toml
    - toolz
    - tqdm
    - typing_extensions
    - ujson
    - unicodecsv
    - urllib3
    - watchdog
    - wcwidth
    - webencodings
    - werkzeug
    - wrapt
    - wurlitzer
    - xlrd
    - xlsxwriter
    - xlwt
    - yapf
    - zict
    - zipp
    - zope
    - zope.event
    - zope.interface
    - zstd
    virtualenv: /opt/jupyterhub
    virtualenv_site_packages: yes
- name: Install JupyterLab extensions
  shell: |
    . /opt/jupyterhub/bin/activate
    jupyter labextension check {{extensions|join(" ")}} && exit 37
    jupyter labextension install {{extensions|join(" ")}}
  vars:
    # TODO: Uncomment extensions as they gain support for JupyterLab 3.x
    extensions:
    - "@jupyter-widgets/jupyterlab-manager"
    #- "@bokeh/jupyter_bokeh"
    - jupyterlab-python-file
    #- "@parente/jupyterlab-quickopen"
    #- "@jupyterlab/hdf5"
    #- "@jupyterlab/latex"
    - jupyterlab-kernelspy
    #- jupyterlab-drawio
    #- "@aquirdturtle/collapsible_headings"
    - "@jupyterlab/geojson-extension"
    - "@krassowski/jupyterlab-lsp"
  register: result
  changed_when: result.rc != 37
  failed_when: result.rc not in (0, 37)
- name: Install JavaScript kernel
  block:
    # TODO: Install npm packages inside the virtualenv?
    # TODO: Use community.general.npm when we have Ansible > 2.9.10
    - community_general_npm:
        name: ijavascript
        global: yes
        unsafe_perm: yes
    - name: Calculate ijavascript spec
      command: /usr/bin/node
      args:
        chdir: /usr/local/lib/node_modules/ijavascript/bin
        stdin: |
          var rc = require("./rc.js")
          var context = rc.context;
          var installKernelAsync = rc.installKernelAsync;
          var log = rc.log;
          var readPackageJson = rc.readPackageJson;
          var parseCommandArgs = rc.parseCommandArgs;
          var setJupyterInfoAsync = rc.setJupyterInfoAsync;
          var setPaths = rc.setPaths;
          var setProtocol = rc.setProtocol;

          process.argv[1] = "/usr/local/lib/node_modules/ijavascript/bin/ijsinstall.js";
          process.env.PATH = '/opt/jupyterhub/bin:' + process.env.PATH;

          setPaths(context);

          readPackageJson(context);

          parseCommandArgs(context, {
            installer: true,
          });

          setJupyterInfoAsync(context, function() {
            setProtocol(context);
            process.stdout.write(JSON.stringify({
              argv: context.args.kernel,
              env: {},
              display_name: "Javascript (Node.js)",
              language: "javascript",
              interrupt_mode: "signal",
              metadata: {},
            }));
          });
      check_mode: no
      changed_when: no
      register: ijs_spec
    - name: Read current kernels
      command: /opt/jupyterhub/bin/jupyter kernelspec list --json
      check_mode: no
      changed_when: no
      register: jupyter_kernels
    - name: Install kernel spec
      shell: |
        set -ex
        tmpdir=$(mktemp -d)
        trap "{ rm -rf $tmpdir; }" EXIT
        mkdir "$tmpdir/javascript"
        cat > "$tmpdir/javascript/kernel.json"
        cp /usr/local/lib/node_modules/ijavascript/images/nodejs/js-green-32x32.png "$tmpdir/javascript/logo-32x32.png"
        cp /usr/local/lib/node_modules/ijavascript/images/nodejs/js-green-64x64.png "$tmpdir/javascript/logo-64x64.png"
        /opt/jupyterhub/bin/jupyter kernelspec install --sys-prefix --replace "$tmpdir/javascript"
      args:
        stdin: "{{ ijs_spec.stdout | string }}"
      when: (ijs_spec.stdout | from_json) != (jupyter_kernels.stdout | from_json | json_query('kernelspecs.javascript.spec'))
- name: Install TypeScript kernel
  block:
    # TODO: Install npm packages inside the virtualenv?
    # TODO: Use community.general.npm when we have Ansible > 2.9.10
    - community_general_npm:
        name: itypescript
        global: yes
        unsafe_perm: yes
    - name: Check TypeScript version
      command: node -p 'require("typescript").version.replace(/([0-9]+\.[0-9]+)\..*/g, "$1")'
      args:
        chdir: /usr/local/lib/node_modules/itypescript
      check_mode: no
      changed_when: no
      register: ts_version
    - name: Generate TypeScript spec
      set_fact:
        its_spec:
          argv:
            - /usr/bin/node
            - /usr/local/lib/node_modules/itypescript/lib/kernel.js
            - "{connection_file}"
            - --protocol=5.1
          display_name: Typescript {{ts_version.stdout}}
          language: typescript
          interrupt_mode: signal
          env: {}
          metadata: {}
    - name: Read current kernels
      command: /opt/jupyterhub/bin/jupyter kernelspec list --json
      check_mode: no
      changed_when: no
      register: jupyter_kernels
    - name: Install kernel spec
      shell: |
        set -ex
        tmpdir=$(mktemp -d)
        trap "{ rm -rf $tmpdir; }" EXIT
        mkdir "$tmpdir/typescript"
        cat > "$tmpdir/typescript/kernel.json"
        cp /usr/local/lib/node_modules/itypescript/images/* "$tmpdir/typescript/"
        /opt/jupyterhub/bin/jupyter kernelspec install --sys-prefix --replace "$tmpdir/typescript"
      args:
        stdin: "{{ its_spec | to_json }}"
      when: its_spec != (jupyter_kernels.stdout | from_json | json_query('kernelspecs.typescript.spec'))
- name: Install Octave
  block:
  - apt:
      name:
      - octave
      - libfftw3-bin
      - gnuplot-nox
      - libopenblas0
      - epstool
      - octave-doc
      - octave-arduino
      - octave-bim
      - octave-communications
      - octave-control
      - octave-data-smoothing
      - octave-database
      - octave-dataframe
      - octave-dicom
      - octave-divand
      - octave-econometrics
      - octave-financial
      - octave-fits
      - octave-fpl
      - octave-fuzzy-logic-toolkit
      - octave-ga
      - octave-gdf
      - octave-general
      - octave-geometry
      - octave-gsl
      - octave-image
      - octave-instrument-control
      - octave-interval
      - octave-io
      - octave-level-set
      - octave-linear-algebra
      - octave-lssa
      - octave-ltfat
      - octave-mapping
      - octave-miscellaneous
      - octave-missing-functions
      - octave-msh
      - octave-mvn
      - octave-nan
      - octave-ncarray
      - octave-netcdf
      - octave-nlopt
      - octave-nurbs
      - octave-octclip
      - octave-octproj
      - octave-openems
      - octave-optics
      - octave-optim
      - octave-optiminterp
      - octave-pfstools
      - octave-plplot
      - octave-quaternion
      - octave-queueing
      - octave-secs1d
      - octave-secs2d
      - octave-secs3d
      - octave-signal
      - octave-sockets
      - octave-sparsersb
      - octave-specfun
      - octave-splines
      - octave-statistics
      - octave-stk
      - octave-strings
      - octave-struct
      - octave-symbolic
      - octave-tsa
      - octave-zeromq
      install_recommends: no
    # N.B. The Octave kernel is installed as part of pip above.
- name: Install Julia kernel
  block:
  - apt:
      name:
      - julia
      - julia-doc
  - command: julia -e 'empty!(DEPOT_PATH); push!(DEPOT_PATH, "/opt/jupyterhub/julia"); using Pkg; Pkg.activate("v1.4-ijulia", shared=true); Pkg.add("IJulia")'
    args:
      creates: /opt/jupyterhub/julia/environments/v1.4-ijulia/Project.toml
  - command: cat /root/.local/share/jupyter/kernels/julia-1.4/kernel.json
    check_mode: no
    changed_when: no
    register: iju_spec
  - set_fact:
      iju_spec_mod: "{{ iju_spec.stdout | from_json | combine({'metadata': {}, 'env': {'JULIA_LOAD_PATH': ':@v#.#-ijulia', 'JULIA_DEPOT_PATH': ':/opt/jupyterhub/julia'}}) | to_json }}"
  - name: Read current kernels
    command: /opt/jupyterhub/bin/jupyter kernelspec list --json
    check_mode: no
    changed_when: no
    register: jupyter_kernels
  - name: Install kernel spec
    shell: |
      set -ex
      tmpdir=$(mktemp -d)
      trap "{ rm -rf $tmpdir; }" EXIT
      mkdir "$tmpdir/julia-1.4"
      cat > "$tmpdir/julia-1.4/kernel.json"
      cp /root/.local/share/jupyter/kernels/julia-1.4/*.png "$tmpdir/julia-1.4/"
      /opt/jupyterhub/bin/jupyter kernelspec install --sys-prefix --replace "$tmpdir/julia-1.4"
    args:
      stdin: "{{ iju_spec_mod | string }}"
    when: (iju_spec_mod | from_json) != (jupyter_kernels.stdout | from_json | json_query('kernelspecs."julia-1.4".spec'))
- name: Install R kernel
  block:
  - name: Install R
    apt:
      name:
      - r-base
      - r-recommended
      - r-cran-pbdzmq
  - name: Install IRkernel and kernelspec
    command: R -e "install.packages('IRkernel'); IRkernel::installspec(user=FALSE, sys_prefix=TRUE)"
    args:
      creates: /opt/jupyterhub/share/jupyter/kernels/ir/kernel.json
    environment:
      PATH: /opt/jupyterhub/bin:{{ ansible_env.PATH }}
- name: Install Rust
  environment:
    CARGO_HOME: /opt/jupyterhub
    RUSTUP_HOME: /opt/jupyterhub/rustup
  block:
  - tempfile:
      state: directory
    register: rustup
    changed_when: no
  - name: Download rustup-init
    get_url:
      url: https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init
      dest: '{{ rustup.path }}/rustup-init'
      mode: 0755
    changed_when: no
  - name: Install rustup
    command: '{{ rustup.path }}/rustup-init --no-modify-path -y -c rust-src'
    register: rustup_output
    changed_when: "'unchanged' not in rustup_output.stdout"
  - name: Install evcxr_repl
    command: /opt/jupyterhub/bin/cargo install evcxr_repl
    args:
      creates: /opt/jupyterhub/bin/evcxr
  - name: Install evcxr_jupyter
    command: /opt/jupyterhub/bin/cargo install evcxr_jupyter
    args:
      creates: /opt/jupyterhub/bin/evcxr_jupyter
  - name: Install Rust kernel
    command: /opt/jupyterhub/bin/evcxr_jupyter --install
    environment:
      JUPYTER_CONFIG_DIR: /opt/jupyterhub/share/jupyter
    args:
      creates: /opt/jupyterhub/share/jupyter/kernels/rust/kernel.json
- name: Install Java
  block:
    - apt:
        name:
          - openjdk-14-jdk-headless
    - file:
        path: /opt/jupyterhub/ijava
        state: directory
    - unarchive:
        src: https://github.com/SpencerPark/IJava/releases/download/v1.3.0/ijava-1.3.0.zip
        dest: /opt/jupyterhub/ijava
        remote_src: yes
    - name: Install iJava kernel
      command: /opt/jupyterhub/bin/python /opt/jupyterhub/ijava/install.py --sys-prefix --replace
      args:
        creates: /opt/jupyterhub/share/jupyter/kernels/java/kernel.json
- name: Install C kernel
  command: /opt/jupyterhub/bin/install_c_kernel --sys-prefix
  args:
    creates: /opt/jupyterhub/share/jupyter/kernels/c/kernel.json
- name: Check for Wolfram
  stat:
    path: /opt/Mathematica/11.3/Executables/WolframKernel
  register: wolframkernel
- name: Install Wolfram kernel
  when: wolframkernel.stat.exists == true
  block:
    - unarchive:
        src: https://github.com/WolframResearch/WolframLanguageForJupyter/releases/download/v0.9.2/WolframLanguageForJupyter-0.9.2.paclet
        dest: /opt/jupyterhub
        remote_src: yes
    - name: Generate Wolfram spec
      set_fact:
        wolfram_spec:
          argv:
            - /opt/Mathematica/11.3/Executables/WolframKernel
            - "-script"
            - /opt/jupyterhub/WolframLanguageForJupyter-0.9.2/Resources/KernelForWolframLanguageForJupyter.wl
            - "{connection_file}"
          display_name: Wolfram Language 11.3
          language: Wolfram Language
          interrupt_mode: signal
          env: {}
          metadata: {}
    - name: Read current kernels
      command: /opt/jupyterhub/bin/jupyter kernelspec list --json
      check_mode: no
      changed_when: no
      register: jupyter_kernels
    - name: Install kernel spec
      shell: |
        set -ex
        tmpdir=$(mktemp -d)
        trap "{ rm -rf $tmpdir; }" EXIT
        mkdir "$tmpdir/wolframlanguage11.3"
        cat > "$tmpdir/wolframlanguage11.3/kernel.json"
        /opt/jupyterhub/bin/jupyter kernelspec install --sys-prefix --replace "$tmpdir/wolframlanguage11.3"
      args:
        stdin: "{{ wolfram_spec | to_json }}"
      when: wolfram_spec != (jupyter_kernels.stdout | from_json | json_query('kernelspecs."wolframlanguage11.3".spec'))
- name: Install Cling
  block:
    - unarchive:
        src: https://root.cern.ch/download/cling/cling_2020-11-05_ROOT-ubuntu2004.tar.bz2
        dest: /opt/jupyterhub/cling
        remote_src: yes
    - name: Install Cling Jupyter kernel
      pip:
        extra_args: --upgrade
        name:
          - /opt/jupyterhub/cling/share/cling/Jupyter/kernel
        virtualenv: /opt/jupyterhub
        virtualenv_site_packages: yes
    - name: Read current kernels
      command: /opt/jupyterhub/bin/jupyter kernelspec list --json
      check_mode: no
      changed_when: no
      register: jupyter_kernels
    - name: Install kernel spec
      shell: |
        /opt/jupyterhub/bin/jupyter kernelspec install --sys-prefix --replace "/opt/jupyterhub/cling/share/cling/Jupyter/kernel/cling-cpp{{item}}"
      when: not (jupyter_kernels.stdout | from_json | json_query('kernelspecs."wolframlanguage'+item+'".spec'))
      loop:
        - 11
        - 14
        - 17
# TODO: Real database
# TODO: Other config settings
- name: Configure jupyterhub
  copy:
    dest: /opt/jupyterhub/{{item}}
    src: "{{ item }}"
  loop:
    - jupyterhub_config.py
    - register.sh
  notify: restart jupyterhub
- name: Install templates
  copy:
    dest: /opt/jupyterhub
    src: templates
- name: Install JavaScript dependencies
  block:
  - file:
      path: /opt/jupyterhub/static/login
      state: directory
  - copy:
      dest: /opt/jupyterhub/static/login/sjcl.js
      src: webathena/app/scripts/sjcl.js
  - copy:
      dest: /opt/jupyterhub/static/login/
      src: webathena/dist/
- name: Install service
  copy:
    dest: /etc/systemd/system/jupyterhub.service
    src: jupyterhub.service
  notify: restart jupyterhub
  register: unit
- name: Enable service
  service:
    name: jupyterhub
    daemon_reload: "{{ unit.changed }}"
    enabled: yes
